// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  user_id         String      @unique @default(uuid())
  user_email      String      @unique
  user_password   String
  user_role       String
  user_country    String
  profile         Profile?    @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
  user_profile_id Int?        @unique
  Freelancer      Freelancer?
  Admin           Admin?
  Client          Client?
  Account         Account?
}

model Account {
  id                        Int     @id @default(autoincrement())
  account_user              User?   @relation(fields: [account_user_id], references: [id], onDelete: Cascade)
  account_user_id           Int     @unique
  account_password_reset    String?
  account_verification_code String?
  account_two_factor_auth   Boolean @default(false)
  account_user_verified     Boolean @default(false)
}

model Profile {
  id                 Int     @id @default(autoincrement())
  profile_firstname  String
  profile_secondname String
  profile_image      String?
  User               User?
}

model Client {
  id                  Int               @id @default(autoincrement())
  client_id           String            @unique @default(uuid())
  client_job          Job[]
  client_user         User?             @relation(fields: [client_user_id], references: [id], onDelete: Cascade)
  client_user_id      Int?              @unique
  client_company_name String?
  client_ratings      Ratings_Reviews[]
  client_payments     Payment[]
}

model Freelancer {
  id            Int    @id @default(autoincrement())
  freelancer_id String @unique @default(uuid())

  freelancer_experience Experience[]
  freelancer_education  Education[]
  freelancer_Bio        Bio?
  freelancer_Bid        Bid[]
  freelancer_user       User?                  @relation(fields: [freelancer_user_id], references: [id], onDelete: Cascade)
  freelancer_user_id    Int?                   @unique
  freelancer_files      String[]
  Job_freelancer_table  Job_freelancer_table[]
  Job                   Job[]
  Skill_Freelancer      Skill_Freelancer[]
  freelancer_ratings    Ratings_Reviews[]
  freelancer_payment    Payment[]
  freelancer_contract   Contract[]
}

model Ratings_Reviews {
  id            Int        @id @default(autoincrement())
  rating        Int
  review        String
  freelancer    Freelancer @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id Int
  client        Client     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id     Int
}

model Bio {
  id              Int         @id @default(autoincrement())
  Freelancer      Freelancer? @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id   Int?        @unique
  bio_title       String
  bio_description String
  bio_hourly_rate Int
  bio_image_url   String
}

model Experience {
  id                   Int         @id @default(autoincrement())
  Freelancer           Freelancer? @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id        Int?
  experience_company   String
  experience_year_from String
  experience_year_to   String
}

model Education {
  id                  Int         @id @default(autoincrement())
  Freelancer          Freelancer? @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id       Int?
  education_school    String
  education_year_from String
  education_year_to   String
}

model Skill {
  id               Int                @id @default(autoincrement())
  skill_name       String             @unique
  Skill_Freelancer Skill_Freelancer[]
  Skill_Job        Skill_Job[]
}

model Skill_Freelancer {
  skill         Skill      @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  skill_id      Int // relation scalar field (used in the `@relation` attribute above)
  freelancer    Freelancer @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt    DateTime   @default(now())
  assignedBy    String

  @@id([skill_id, freelancer_id])
}

model Skill_Job {
  skill      Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  skill_id   Int // relation scalar field (used in the `@relation` attribute above)
  job        Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id     Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([skill_id, job_id])
}

model Job {
  id                    Int                    @id @default(autoincrement())
  job_title             String
  job_description       String
  job_length            String
  job_hourly_from       Int?
  job_hourly_to         Int?
  job_fixed_price       Int?
  job_level             String
  job_completion_status Boolean                @default(false)
  job_bid               Bid[]
  Client                Client?                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId              Int?
  Job_freelancer_table  Job_freelancer_table[]
  Freelancer            Freelancer?            @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  freelancerId          Int?
  Skill_Job             Skill_Job[]
  job_contract          Contract[]
}

model Payment {
  id                    Int         @id @default(autoincrement())
  payment_Client        Client?     @relation(fields: [payment_client_id], references: [id], onDelete: Cascade)
  payment_client_id     Int?
  payment_amount        Int
  payment_freelancer    Freelancer? @relation(fields: [payment_freelancer_id], references: [id], onDelete: Cascade)
  payment_freelancer_id Int?
}

model Job_freelancer_table {
  job           Job        @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id        Int // relation scalar field (used in the `@relation` attribute above)
  freelancer    Freelancer @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt    DateTime   @default(now())
  assignedBy    String

  @@id([job_id, freelancer_id])
}

model Bid {
  id                  Int         @id @default(autoincrement())
  bid_rate            Int
  bid_coverletter     String
  bid_attachments     String[]
  Job                 Job?        @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id              Int?
  Freelancer          Freelancer? @relation(fields: [freelancer_id], references: [id], onDelete: Cascade)
  freelancer_id       Int?
  bid_approval_status Boolean
}

model Contract {
  id                         Int         @id @default(autoincrement())
  contract_job               Job?        @relation(fields: [contract_job_id], references: [id], onDelete: Cascade)
  contract_job_id            Int
  contract_freelancer        Freelancer? @relation(fields: [contract_freelancer_id], references: [id])
  contract_freelancer_id     Int?
  contract_details           String
  contract_start             DateTime
  contract_end               DateTime
  contract_date_signed       DateTime
  contract_freelancer_signed String?
  contract_client_signed     String
  contract_accepted          Boolean?
}

model Admin {
  id            Int    @id @default(autoincrement())
  admin_id      String @unique @default(uuid())
  admin_user    User?  @relation(fields: [admin_user_id], references: [id], onDelete: Cascade)
  admin_user_id Int?   @unique
}
