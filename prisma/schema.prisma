// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  user_id         String      @unique @default(uuid())
  user_email      String      @unique
  user_password   String
  user_role       String
  user_country    String
  profile         Profile?    @relation(fields: [user_profile_id], references: [id])
  user_profile_id Int?        @unique
  Freelancer      Freelancer?
  Admin           Admin?
  Client          Client?
}

model Profile {
  id                 Int     @id @default(autoincrement())
  profile_firstname  String
  profile_secondname String
  profile_image      String?
  User               User?
}

model Client {
  id                  Int     @id @default(autoincrement())
  client_id           String  @unique @default(uuid())
  client_job          Job[]
  client_user         User?   @relation(fields: [client_user_id], references: [id])
  client_user_id      Int?    @unique
  client_company_name String?
}

model Freelancer {
  id                    Int          @id @default(autoincrement())
  freelancer_id         String       @unique @default(uuid())
  freelancer_skills     Skill[]
  freelancer_experience Experience[]
  freelancer_education  Education[]
  freelancer_Bio        Bio?
  freelancer_Bid        Bid[]
  freelancer_active_job Job[]
  freelancer_user       User?        @relation(fields: [freelancer_user_id], references: [id])
  freelancer_user_id    Int?         @unique
  freelancer_files      String[]
}

model Bio {
  id              Int         @id @default(autoincrement())
  Freelancer      Freelancer? @relation(fields: [freelancer_id], references: [id])
  freelancer_id   Int?        @unique
  bio_title       String
  bio_description String
  bio_hourly_rate Int
}

model Experience {
  id                   Int         @id @default(autoincrement())
  Freelancer           Freelancer? @relation(fields: [freelancer_id], references: [id])
  freelancer_id        Int?
  experience_company   String
  experience_year_from String
  experience_year_to   String
}

model Education {
  id                  Int         @id @default(autoincrement())
  Freelancer          Freelancer? @relation(fields: [freelancer_id], references: [id])
  freelancer_id       Int?
  education_school    String
  education_year_from String
  education_year_to   String
}

model Skill {
  id            Int         @id @default(autoincrement())
  Freelancer    Freelancer? @relation(fields: [freelancer_id], references: [id])
  freelancer_id Int?
  skill_name    String?
  Job           Job?        @relation(fields: [job_id], references: [id])
  job_id        Int?
}

model Job {
  id                      Int          @id @default(autoincrement())
  job_title               String
  job_description         String
  job_length              String
  job_hourly_from         Int?
  job_hourly_to           Int?
  job_fixed_price         Int?
  job_level               String
  job_skill               Skill[]
  job_bid                 Bid[]
  Client                  Client?      @relation(fields: [clientId], references: [id])
  clientId                Int?
  job_approved_freelancer Freelancer[]
}

model Bid {
  id                  Int         @id @default(autoincrement())
  bid_rate            Int
  bid_coverletter     String
  bid_attachments     String[]
  Job                 Job?        @relation(fields: [job_id], references: [id])
  job_id              Int?
  Freelancer          Freelancer? @relation(fields: [freelancer_id], references: [id])
  freelancer_id       Int?
  bid_approval_status Boolean
}

model Admin {
  id            Int    @id @default(autoincrement())
  admin_id      String @unique @default(uuid())
  admin_user    User?  @relation(fields: [admin_user_id], references: [id])
  admin_user_id Int?   @unique
}
